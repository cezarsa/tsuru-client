// Code generated by generator/main.go, DO NOT EDIT.

package defaultconfig

const (
	Compose = `version: "3"

services:
  redis:
    image: redis:latest
    networks:
      - tsuru
    volumes:
      - redis-data:/data/db
  
  mongo:
    image: mongo:latest
    networks:
      - tsuru
    volumes:
      - mongo-data:/data

  planb:
    image: tsuru/planb:latest
    command: --listen :8080 --read-redis-host redis --write-redis-host redis --access-log stdout
    ports:
      - 80:8080
    networks:
      - tsuru
    depends_on:
      - redis

  registry:
    image: registry:2
    environment:
      - "REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry"
      - "REGISTRY_HTTP_TLS_CERTIFICATE=/certs/{{CLUSTER_PRIVATE_ADDR}}:5000/registry-cert.pem"
      - "REGISTRY_HTTP_TLS_KEY=/certs/{{CLUSTER_PRIVATE_ADDR}}:5000/registry-key.pem"
    volumes:
      - "/etc/docker/certs.d:/certs:ro"
      - registry-data:/var/lib/registry
    ports:
      - 5000:5000
    networks:
      - tsuru

  tsuru:
    image: "{{TSURU_API_IMAGE}}"
    volumes:
      - "/etc/docker/certs.d:/certs:ro"
      - "/etc/tsuru/tsuru.conf:/etc/tsuru/tsuru.conf:ro"
    ports:
      - 8080:8080
    networks:
      - tsuru
    depends_on:
      - redis
      - mongo
      - registry
      - planb
    environment:
      - MONGODB_ADDR=mongo
      - MONGODB_PORT=27017
      - REDIS_ADDR=redis
      - REDIS_PORT=6379
      - HIPACHE_DOMAIN={{CLUSTER_ADDR}}.nip.io
      - REGISTRY_ADDR={{CLUSTER_PRIVATE_ADDR}}
      - REGISTRY_PORT=5000
      - TSURU_ADDR=http://{{CLUSTER_ADDR}}
      - TSURU_PORT=8080

networks:
  tsuru:
    driver: overlay
    ipam:
      driver: default
      config:
        - subnet: 10.0.9.0/24

volumes:
  mongo-data:
  redis-data:
  registry-data:

`
	Tsuru = `listen: "0.0.0.0:8080"
host: $TSURU_ADDR:8080
use-tls: false
tls:
    cert-file: /certs/cert.pem
    key-file: /certs/key.pem
repo-manager: none
database:
  url: $MONGODB_ADDR:$MONGODB_PORT
  name: tsuru
auth:
  token-expire-days: 2
  hash-cost: 4
  user-registration: true
provisioner: docker
docker:
  bs:
    socket: /var/run/docker.sock
  cluster:
    storage: mongodb
    mongo-url: $MONGODB_ADDR:$MONGODB_PORT
    mongo-database: cluster
  collection: docker
  registry: $REGISTRY_ADDR:$REGISTRY_PORT
  repository-namespace: tsuru
  router: hipache
  deploy-cmd: /var/lib/tsuru/deploy
  run-cmd:
    bin: /var/lib/tsuru/start
    port: "8888"
  tls:
    root-path: /certs
  auto-scale:
    enabled: true
    run-interval: $DOCKER_AUTOSCALE_RUN_INTERVAL
routers:
  hipache:
    type: hipache
    domain: $HIPACHE_DOMAIN
    redis-server: $REDIS_ADDR:$REDIS_PORT
queue:
  mongo-url: $MONGODB_ADDR:$MONGODB_PORT
  mongo-database: queuedb
quota:
  units-per-app: 4
  apps-per-user: 2
log:
  disable-syslog: true
  use-stderr: true`
)
